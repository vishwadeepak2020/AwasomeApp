// import React from 'react';
// import { Provider } from 'react-redux';
// import { PersistGate } from 'redux-persist/integration/react';
// import { store, persistor } from './src/redux/store'; // Adjust the path to your store
// import TodoApp from './src/screen/TodoApp'; // Adjust the path to your TodoApp component

// const App = () => {
//   return (
//     <Provider store={store}>
//       <PersistGate loading={null} persistor={persistor}>
//         <TodoApp />
//       </PersistGate>
//     </Provider>
//   );
// };

// export default App;

// eslint-disable-next-line prettier/prettier

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { View, Text, Button, FlatList, StyleSheet, Alert } from 'react-native';
import axios from 'axios';
import PushNotification from 'react-native-push-notification';
import ChildComponent from './src/component/ChildComponent';

const API_URL = 'https://jsonplaceholder.typicode.com/posts';

const App = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [counter, setCounter] = useState(0);

  useEffect(() => {
    PushNotification.configure({
      onRegister: function(token) {
        console.log("TOKEN1234:", token); // You can save this token to send notifications from your server
      },
      onNotification: function(notification) {
        console.log("NOTIFICATION:", notification);
      },
      requestPermissions: true, // Request permissions on iOS
    });

    if (Platform.OS === 'android') {
      PushNotification.createChannel(
        {
          channelId: "default-channel-id", // (required)
          channelName: "Default Channel", // (required)
          channelDescription: "A channel for default notifications", // (optional)
          sound: "default", // (optional)
          importance: PushNotification.Importance.HIGH, // (optional)
          vibrate: true, // (optional)
        },
        (created) => console.log(`createChannel returned '${created}'`) // (optional)
      );
    }

    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    sendNotification('FETCHING DATA');
    try {
      const response = await axios.get(API_URL);
      setData(response.data);
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
      sendNotification('FETCHING DATA COMPLETE');
    }
  };

  const sendNotification = (message) => {
    PushNotification.localNotification({
      channelId: "default-channel-id",
      message,
    });
  };

  

  const renderItem = useCallback(({ item }) => (
    <ChildComponent
      item={item}
      
    />
  ), []);

  return (
    <View style={styles.container}>
      <View style={styles.counterContainer}>
        <Button title="-" onPress={() => setCounter(counter - 1)} />
        <Text style={styles.counter}>{counter}</Text>
        <Button title="+" onPress={() => setCounter(counter + 1)} />
      </View>
      {loading ? (
        <Text>Loading...</Text>
      ) : (
        <FlatList
          data={data}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderItem}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  counterContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  counter: {
    fontSize: 24,
  },
});

export default App;

